use ark_ff::{
    fields::fp3::{Fp3, Fp3Config},
    Field, MontFp,
};

use crate::yafa_108::Fq;

pub type Fq3 = Fp3<Fq3Config>;

pub struct Fq3Config;

impl Fp3Config for Fq3Config {
    type Fp = Fq;

    /// NONRESIDUE = 2
    /// It means that (x^3 - 2) is irreducible in F_{q^3}
    /// We also need "u" to be a nonresidue so it can be the twist
    const NONRESIDUE: Fq = MontFp!("2");

    /// t = (q^3 - 1) / pow(2, 2)
    const TWO_ADICITY: u32 = 2;


    #[rustfmt::skip]
    /// t_minus_one_div_2 = 5259327958296257160798339617739404311287866119517887038597020067053790
    /// 564937387158187688507839337941888171495400689700463679407774501310608529160950656643790878
    /// 471961339057372555061299738256260553784479382194001072666229585698314970952517783702719060
    /// 839948583705938809801316768576410011730697766836920672841539750758648682480136871425758964
    /// 077325175953157592542690023529606604609745643961736867362354530575116279297005462061152696
    /// 954107837216710347677207505869315867757381172670700787061105500782342161481958339401434
    const TRACE_MINUS_ONE_DIV_TWO: &'static [u64] = &[
        0x44d0a5d4d4cc56da,
        0x3f671a40f80e154d,
        0xff4016612678cd53,
        0xf3de5b89b6818375,
        0x7864cf71a2cef4a8,
        0xc63c145d2c6ee8e3,
        0x04898fe404b80dd3,
        0x948f916cdc9c613d,
        0x22f05e2ac0b3be2a,
        0x7d6158f24158cb66,
        0xeaa949196ebae125,
        0xa6075906923415f8,
        0xf7051e002352990b,
        0xc4dbd8f460f79d16,
        0xc4f6a439a121fba1,
        0x070cd9ff2daec96a,
        0x562055c1b7798d32,
        0xe2e1d7dfc7929256,
        0xfde8e876dc941e2f,
        0x5fa5e36e78fb34a7,
        0x02d0d85cab04841f,
        0xc7217cb5188309ad,
        0xcd44234daeca7c56,
        0x0682d9d3698335db,
        0xdc9411433bec1eaf,
        0x4ccdd742076ed59c,
        0x16c8006f424b45
    ];

    /// a quadratic nonresidue u
    /// u^T
    const QUADRATIC_NONRESIDUE_TO_T: Fq3 = Fq3::new(
        MontFp!("14406324992416917075107177930030367158384890523362000749100473207959049460198256235973675809354785447933353927206167081029252435762580516269064278530936810650739227629472879"),
        Fq::ZERO,
        Fq::ZERO,
    );

    /// NQR = 2
    /// NQR ^ ((q^0 - 1) / 3) = 1
    /// NQR ^ ((q^1 - 1) / 3) = 24491879255480909980663669766659025805836825989868042187886821806688003935643152060455230634213282186553447257148337699253005615717746676522292850845300280294232834142169517
    /// NQR ^ ((q^2 - 1) / 3) = 10288961826538561583603467000536862691324385019360500217077138495924314897020993556334922753355286690536341186182255919711688847326089126664096874382419413392793420703874335
    const FROBENIUS_COEFF_FP3_C1: &'static [Fq] = &[
        Fq::ONE,
        MontFp!("24491879255480909980663669766659025805836825989868042187886821806688003935643152060455230634213282186553447257148337699253005615717746676522292850845300280294232834142169517"),
        MontFp!("10288961826538561583603467000536862691324385019360500217077138495924314897020993556334922753355286690536341186182255919711688847326089126664096874382419413392793420703874335"),
    ];

    /// NQR = 2
    /// NQR ^ (2 * (q^0 - 1) / 3) = 1
    /// NQR ^ (2 * (q^1 - 1) / 3) = 10288961826538561583603467000536862691324385019360500217077138495924314897020993556334922753355286690536341186182255919711688847326089126664096874382419413392793420703874335
    /// NQR ^ (2 * (q^2 - 1) / 3) = 24491879255480909980663669766659025805836825989868042187886821806688003935643152060455230634213282186553447257148337699253005615717746676522292850845300280294232834142169517
    const FROBENIUS_COEFF_FP3_C2: &'static [Fq] = &[
        Fq::ONE,
        Self::FROBENIUS_COEFF_FP3_C1[2],
        Self::FROBENIUS_COEFF_FP3_C1[1],
    ];
}
