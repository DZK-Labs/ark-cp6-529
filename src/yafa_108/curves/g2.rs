use ark_ec::{
    models::CurveConfig,
    short_weierstrass::{Affine, Projective, SWCurveConfig},
};
use ark_ff::{Field, MontFp};

use crate::yafa_108::{Fq, Fq3, Fr};

pub type G2Affine = Affine<Parameters>;
pub type G2Projective = Projective<Parameters>;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq3;
    type ScalarField = Fr;

    /// COFACTOR =
    /// 726726886795224844605862069009898940861687901303075691762904985779862199643629549368160648
    /// 101516193501672955437075875652993924163644219867857332814382981687662806476128613460127897
    /// 964217230378169042051917041793548330220695206406784608340953286143661873591990564852877575
    /// 735414956858902999883887464694646957850111726423572809242652238015382526099588420834286969
    /// 916870199868835572386002046396865439392409275568594557647057684332132868235236100
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x55b65ba67d349304,
        0x19bfd908aa18a1d0,
        0xea1b02ffa4730d50,
        0x5f30f2832574c04e,
        0xe95715e341a98565,
        0x550746195d560fd8,
        0xbadab12caadb75a1,
        0x94da6c018200630a,
        0xa9b498e4a406cc19,
        0xe63352507f8897e9,
        0x7fa6743474161d96,
        0x911d512e19981a36,
        0x125b50ed21e62534,
        0x2ee37326b89dafc0,
        0x595fca9878419c72,
        0x0f27e144d8e957dc,
        0xa0461c02e6c10c7c,
        0x11b8a324657e0e5c,
        0xa1103ff7e3dbcdb6,
        0xc259971d1b71d23e,
        0xe2afc34dc49f0dbe,
        0xd71c79058c75e34a,
        0x16c80007accd8dc
    ];

    /// COFACTOR^(-1) mod r =
    /// 22582721958699120459790815271456780810858829859261718489478745480578972630174
    const COFACTOR_INV: Fr =
        MontFp!("22582721958699120459790815271456780810858829859261718489478745480578972630174");
}

impl SWCurveConfig for Parameters {
    /// TWIST = (0, 1, 0)
    /// COEFF_A = G1::COEFF_A * TWIST^2
    const COEFF_A: Fq3 = Fq3::new(Fq::ZERO, Fq::ZERO, Fq::ZERO);

    /// TWIST = (0, 1, 0)
    /// COEFF_B = G1::COEFF_B * TWIST^3 = G1::COEFF_B * NONRESIDE
    const COEFF_B: Fq3 = Fq3::new(MontFp!("62099136"), Fq::ZERO, Fq::ZERO);

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const GENERATOR: G2Affine = G2Affine::new_unchecked(G2_GENERATOR_X, G2_GENERATOR_Y);
    // This is the point (u + 3, 16399745525914760875122822753296350670146148646493981347801019658
    // 4974651832260489547154965730230287901162813838819504218501063654238729264453808620564961547
    // 24756285267266888*u^2 + 1428725444905761342823912326923276592561970382446970420290187715131
    // 0093048222249908017251200009970845728118751765949951105910650164572175833612033146936098637
    // 881156817742266*u + 67581327726597132966749957858127838644323731843665910733072840363027716
    // 0345581250943954549492116413341182297640653467835630039837549443336827320517413471064766205
    // 6414848650)
    // multiplied by the cofactor
    //
    // The number of points on the curve
    // 4207461226347482993393603908999921895333327526414550509650736118016794992267577681084392484
    // 9809657360885733735461803068663448419618998350346139732225192923396886978143021447634012407
    // 9773466211959941796770179681655789917802809899895459449762549378355371967193112709155484805
    // 2083608412799744718833303344955634533389915438277771384346636366046804113571184420208061177
    // 8517550049888741382347585816538884386662790550643273998680667111320791291600388960443712456
    // 250454022861569583984825897441500255762247915491861374004958900
}

const G2_GENERATOR_X: Fq3 = Fq3::new(G2_GENERATOR_X_C0, G2_GENERATOR_X_C1, G2_GENERATOR_X_C2);
const G2_GENERATOR_Y: Fq3 = Fq3::new(G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1, G2_GENERATOR_Y_C2);

/// G2_GENERATOR_X_C0 =
/// 25392698904884709132999037760254876657725187667682696813186827970865787471891640764049212417291921682011505465948857004062296822796470822300734123777520888334658977998568595
pub const G2_GENERATOR_X_C0: Fq = MontFp!("25392698904884709132999037760254876657725187667682696813186827970865787471891640764049212417291921682011505465948857004062296822796470822300734123777520888334658977998568595");

/// G2_GENERATOR_X_C1 =
/// 0
pub const G2_GENERATOR_X_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_X_C2 =
/// 0
pub const G2_GENERATOR_X_C2: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C0 =
/// 4396708447983789823202089491402954890042030420320791355295989970672982059020950821852365967834639548445057566914035829163770719788716368901156926304377953920559312066532663
pub const G2_GENERATOR_Y_C0: Fq = MontFp!("4396708447983789823202089491402954890042030420320791355295989970672982059020950821852365967834639548445057566914035829163770719788716368901156926304377953920559312066532663");

/// G2_GENERATOR_Y_C1 =
/// 0
pub const G2_GENERATOR_Y_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C2 =
/// 0
pub const G2_GENERATOR_Y_C2: Fq = Fq::ZERO;
