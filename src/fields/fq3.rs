use ark_ff::{
    fields::fp3::{Fp3, Fp3Config},
    Field, MontFp,
};

use crate::Fq;

pub type Fq3 = Fp3<Fq3Config>;

pub struct Fq3Config;

impl Fp3Config for Fq3Config {
    type Fp = Fq;

    /// NONRESIDUE = 11
    /// It means that (x^3 - 11) is irreducible in F_{q^3}
    /// We also need "u" to be a nonresidue so it can be the twist
    const NONRESIDUE: Fq = MontFp!("11");

    /// t = (q^3 - 1) / pow(2, 4)
    const TWO_ADICITY: u32 = 4;

    #[rustfmt::skip]
    /// t_minus_one_div_2 = 8449328286685207265041291734944917179403246797
    /// 50050610910029096259979913836436044517347791243774
    /// 04233120427500076107142412406493210766970767765297
    /// 53806521938492676643920459962089030027703209139784
    /// 94055940694821621774909292714370121867446171746453
    /// 82398451722958612936337554278492191753286471604005
    /// 49650895086746051923583058065967406147334079313297
    /// 96137076806896313755497027047847342360435381008842
    /// 62449291763076483313176240503699421014427658931230
    /// 352248767854982602617100291732
    const TRACE_MINUS_ONE_DIV_TWO: &'static [u64] = &[
        0xad5b6d6cac99ce94,
        0x09e73b5632e352be,
        0x1e898846883b0714,
        0x92469394463f045c,
        0x79562250131bbedf,
        0xa7ad1c04be295d36,
        0x59c098978557a720,
        0xf9ddd7e9c2fd57cc,
        0xa50943023c86dc89,
        0x8aa44f2aacc72344,
        0xb65737026ff90c22,
        0x290cf188fbdf02d0,
        0x0ffa8149ca8db0a7,
        0x60718d5be6092a21,
        0xb7fff9c6da581f61,
        0x99ef3258014dead1,
        0xa83e06a9f6ff76e9,
        0x0e3bccdb1bb4b3d7,
        0xf28b94bea151ef3f,
        0x81fa05a3734ae452,
        0x3b1d60e9a0245993,
        0xada3b69244f02725,
        0xa0be7f24bc0fc1d4,
        0xb5d12ab48d2a9923,
        0x1fe1db668a32,
    ];

    /// a quadratic nonresidue u
    /// u^T
    const QUADRATIC_NONRESIDUE_TO_T: Fq3 = Fq3::new(
        MontFp!("1339584616204869995558417944393658022394000787868829505712704161568106826989181149741005593738505191158382333682747386032869831571684973325452292177022314187604"),
        Fq::ZERO,
        Fq::ZERO,
    );

    /// NQR = 11
    /// NQR ^ ((q^0 - 1) / 3) = 1
    /// NQR ^ ((q^1 - 1) / 3) = 762455925000469635486958154862017323551451463354236306846386042139193650814920395342797265172002456953439664163417039361154927345608957538552061332385880578562
    /// NQR ^ ((q^2 - 1) / 3) = 630671112143114611712935202121094239350294111583666017848575488629665946794047857881658061862511333644650561255352230185858099779685190181602079727385310409518
    const FROBENIUS_COEFF_FP3_C1: &'static [Fq] = &[
        Fq::ONE,
        MontFp!("762455925000469635486958154862017323551451463354236306846386042139193650814920395342797265172002456953439664163417039361154927345608957538552061332385880578562"),
        MontFp!("630671112143114611712935202121094239350294111583666017848575488629665946794047857881658061862511333644650561255352230185858099779685190181602079727385310409518"),
    ];

    /// NQR = 11
    /// NQR ^ (2 * (q^0 - 1) / 3) = 1
    /// NQR ^ (2 * (q^1 - 1) / 3) = 630671112143114611712935202121094239350294111583666017848575488629665946794047857881658061862511333644650561255352230185858099779685190181602079727385310409518
    /// NQR ^ (2 * (q^2 - 1) / 3) = 762455925000469635486958154862017323551451463354236306846386042139193650814920395342797265172002456953439664163417039361154927345608957538552061332385880578562
    const FROBENIUS_COEFF_FP3_C2: &'static [Fq] = &[
        Fq::ONE,
        Self::FROBENIUS_COEFF_FP3_C1[2],
        Self::FROBENIUS_COEFF_FP3_C1[1],
    ];
}
