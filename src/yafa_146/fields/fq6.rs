use crate::yafa_146::{Fq, Fq2, Fq2Config};
use ark_ff::{
    fields::fp6_3over2::{Fp6, Fp6Config},
    Field, Fp2, Fp2Config, MontFp,
};

pub type Fq6 = Fp6<Fq6Config>;

#[derive(Copy, Clone)]
pub struct Fq6Config;

impl Fp6Config for Fq6Config {
    type Fp2Config = Fq2Config;

    /// NONRESIDUE = (0, 1, 0)
    #[rustfmt::skip]
    const NONRESIDUE: Fq2 = Fq2::new(Fq::ZERO, Fq::ONE);

    #[rustfmt::skip]
    const FROBENIUS_COEFF_FP6_C1: &'static [Fp2<Self::Fp2Config>] = &[
        Fq2::new(
            Fq::ONE,
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("22684684505229882416948285270218997440839683235327132785256469607245693680604029123404282437563474551944295516999841064542480240558845597162904726440521080541363789749413060"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("22684684505229882416948285270218997440839683235327132785256469607245693680604029123404282437563474551944295516999841064542480240558845597162904726440521080541363789749413059"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("-1"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("12096162288367766698954075489111117325114147802434903811282420612693141158030630686762987842077849049565590591334063587059984727986156044850170375602989378210169754148015141"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("12096162288367766698954075489111117325114147802434903811282420612693141158030630686762987842077849049565590591334063587059984727986156044850170375602989378210169754148015142"),
            Fq::ZERO,
        ),

    ];
    const FROBENIUS_COEFF_FP6_C2: &'static [Fp2<Self::Fp2Config>] = &[
        Fq2::new(
            Fq::ONE,
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("22684684505229882416948285270218997440839683235327132785256469607245693680604029123404282437563474551944295516999841064542480240558845597162904726440521080541363789749413059"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("12096162288367766698954075489111117325114147802434903811282420612693141158030630686762987842077849049565590591334063587059984727986156044850170375602989378210169754148015141"),
            Fq::ZERO,
        ),
        Fq2::new(
            Fq::ONE,Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("22684684505229882416948285270218997440839683235327132785256469607245693680604029123404282437563474551944295516999841064542480240558845597162904726440521080541363789749413059"),
            Fq::ZERO,
        ),
        Fq2::new(
            MontFp!("12096162288367766698954075489111117325114147802434903811282420612693141158030630686762987842077849049565590591334063587059984727986156044850170375602989378210169754148015141"),
            Fq::ZERO,
        ),
    ];

    #[inline(always)]
    fn mul_fp2_by_nonresidue(fe: &Fq2) -> Fq2 {
        // Karatsuba multiplication with constant other = u.
        let c0 = Fq2Config::mul_fp_by_nonresidue(&fe.c1);
        let c1 = fe.c0.clone();
        Fq2::new(c0, c1)
    }
}
